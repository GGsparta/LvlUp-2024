//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMap: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMap"",
    ""maps"": [],
    ""controlSchemes"": [
        {
            ""name"": ""ZQSD"",
            ""bindingGroup"": ""ZQSD"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""YGHJ"",
            ""bindingGroup"": ""YGHJ"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""PLM%"",
            ""bindingGroup"": ""PLM%"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""5123"",
            ""bindingGroup"": ""5123"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""controller"",
            ""bindingGroup"": ""controller"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }
    private int m_ZQSDSchemeIndex = -1;
    public InputControlScheme ZQSDScheme
    {
        get
        {
            if (m_ZQSDSchemeIndex == -1) m_ZQSDSchemeIndex = asset.FindControlSchemeIndex("ZQSD");
            return asset.controlSchemes[m_ZQSDSchemeIndex];
        }
    }
    private int m_YGHJSchemeIndex = -1;
    public InputControlScheme YGHJScheme
    {
        get
        {
            if (m_YGHJSchemeIndex == -1) m_YGHJSchemeIndex = asset.FindControlSchemeIndex("YGHJ");
            return asset.controlSchemes[m_YGHJSchemeIndex];
        }
    }
    private int m_PLMSchemeIndex = -1;
    public InputControlScheme PLMScheme
    {
        get
        {
            if (m_PLMSchemeIndex == -1) m_PLMSchemeIndex = asset.FindControlSchemeIndex("PLM%");
            return asset.controlSchemes[m_PLMSchemeIndex];
        }
    }
    private int m__5123SchemeIndex = -1;
    public InputControlScheme _5123Scheme
    {
        get
        {
            if (m__5123SchemeIndex == -1) m__5123SchemeIndex = asset.FindControlSchemeIndex("5123");
            return asset.controlSchemes[m__5123SchemeIndex];
        }
    }
    private int m_controllerSchemeIndex = -1;
    public InputControlScheme controllerScheme
    {
        get
        {
            if (m_controllerSchemeIndex == -1) m_controllerSchemeIndex = asset.FindControlSchemeIndex("controller");
            return asset.controlSchemes[m_controllerSchemeIndex];
        }
    }
}
